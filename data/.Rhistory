date_list = sapply(seq(-29, 0), function(x) x + date)
return(date_list)
}
create_date_list("2020-01-01")
create_date_list = function(d){
date_d = as.Date(d)
date_list = sapply(seq(-29, 0), function(x) x + date_d)
return(date_list)
}
create_date_list("2020-01-01")
create_date_list = function(d){
date_d = as.Date(d)
date_list = sapply(seq(-29, 0), function(x) as.Date(x + date_d))
return(date_list)
}
create_date_list("2020-01-01")
create_date_list("2020-01-01")
create_date_list = function(d){
date_d = as.Date(d)
#date_list = sapply(seq(-29, 0), function(x) as.Date(x + date_d))
#return(date_list)
}
create_date_list("2020-01-01")
create_date_list = function(d){
date_d = as.Date(d)
date_list = date_d + seq(-29,0)
return(date_list)
}
create_date_list("2020-01-01")
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29,0)
date_list = sapply(date_list1, as.Date)
return(date_list)
}
create_date_list("2020-01-01")
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
#date_list = sapply(date_list1, as.Date)
return(date_list)
}
create_date_list("2020-01-01")
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
#date_list = sapply(date_list1, as.Date)
return(date_list1)
}
create_date_list("2020-01-01")
dates = create_date_list("2020-01-01")
class(dates[1])
class(dates[5])
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
date_list = sapply(date_list1, function(x){format(x, "Y%m%d")})
return(date_list)
}
dates = create_date_list("2020-01-01")
class(dates[5])
dates[5]
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
date_list = vapply(date_list1, function(x){format(x, "Y%m%d")})
return(date_list)
}
dates = create_date_list("2020-01-01")
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
date_list = lapply(date_list1, function(x){format(x, "Y%m%d")})
return(date_list)
}
dates = create_date_list("2020-01-01")
View(dates)
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
date_list = format(date_list1, "Y%m%d")
return(date_list)
}
dates = create_date_list("2020-01-01")
class(dates[5])
dates[5]
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
#date_list = format(date_list1, "Y%m%d")
return(date_list)
}
dates = create_date_list("2020-01-01")
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
#date_list = format(date_list1, "Y%m%d")
return(date_list1)
}
dates = create_date_list("2020-01-01")
class(dates[5])
dates[5]
dates = create_date_list("2020-01-01")
format(dates, "Y%m%d")
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
#date_list = format(date_list1, "%Y%m%d")
return(date_list1)
}
dates = create_date_list("2020-01-01")
dates
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
date_list = format(date_list1, "%Y%m%d")
return(date_list)
}
dates = create_date_list("2020-01-01")
dates
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
date_list = format(date_list1, "%Y%m%d")
return(date_list)
}
layers_to_extract = lapply(avalanches$date, create_date_list)
View(layers_to_extract)
avalanches_tmean = mapply(function(point, layers) terra::extract(tmean[[layers_to_extract]], point),
split(ava_vect, 1:length(ava_vect)),
layers_to_extract,
SIMPLIFY = FALSE)
for (i in seq_along(ava_vect)) {
# Get the specific layers for the current point
layers <- layers_to_extract[[i]]
# Extract values from the specified layers for the current point
extracted_values <- extract(tmean[[layers]], ava_vect[i, , drop=FALSE])
# Add to the list, converting each extraction result to a data frame
values_list[[i]] <- as.data.frame(extracted_values)
}
for (i in seq_along(ava_vect)) {
# Get the specific layers for the current point
layers <- layers_to_extract[[i]]
# Extract values from the specified layers for the current point
extracted_values <- terra::extract(tmean[[layers]], ava_vect[i, , drop=FALSE])
# Add to the list, converting each extraction result to a data frame
values_list[[i]] <- as.data.frame(extracted_values)
}
values_list <- list()
for (i in seq_along(ava_vect)) {
# Get the specific layers for the current point
layers = layers_to_extract[[i]]
# Extract values from the specified layers for the current point
extracted_values = terra::extract(tmean[[layers]], ava_vect[i, , drop=FALSE])
# Add to the list, converting each extraction result to a data frame
values_list[[i]] = as.data.frame(extracted_values)
}
# Combine all results into one data frame
values_df <- do.call(rbind, values_list)
values_df <- rbind(values_list)
View(values_df)
View(values_list)
values_df <- bind_rows(values_list)
View(values_df)
values_df <- row_bind(values_list)
values_df <- do.call(rbind, lapply(values, as.data.frame))
View(values_list)
values_list[1]
View(avalanches)
avalanches_tmean = extractRange(tmean,
ava_vect,
first = simple_date_minus30,
last = simple_date,
ID = TRUE)
View(avalanches)
avalanches_tmean = extractRange(tmean,
ava_vect,
first = "simple_date_minus30",
last = "simple_date",
ID = TRUE)
avalanches_tmean = extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
View(avalanches_tmean)
avalanches_tmean[2]
avalanches_tmean = terra::extract(tmean,
ava_vect,
layer = layers_to_extract,
ID = TRUE)
layers_to_extract
avalanches_tmean = terra::extract(tmean,
ava_vect,
layer = as.Numeric(layers_to_extract),
ID = TRUE)
avalanches_tmean = terra::extract(tmean,
ava_vect,
layer = as.numeric(layers_to_extract),
ID = TRUE)
avalanches_tmean = terra::extract(tmean,
ava_vect,
layer = as_numeric(layers_to_extract),
ID = TRUE)
avalanches_tmean = terra::extract(tmean,
ava_vect,
layer = layers_to_extract,
ID = TRUE)
avalanches = avalanches_pre |>
separate_wider_regex(cols = Location,
patterns = pattern,
too_few = "align_start") |>
separate_wider_regex(cols = Date,
patterns = date_pattern,
too_few = "align_start") |>
mutate(date = paste("20", tyear, "/", tmonth, "/", tday, sep = "")) |>
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude),
date = as.Date(date),
simple_date = format(date, "%Y%m%d"),
date_minus30 = date - 30,
simple_date_minus30 = format(date_minus30, "%Y%m%d"))|>
filter(date < end_date) |>
filter(date > start_date + 30)
ava_vect = vect(avalanches, geom = c("longitude", "latitude"), crs = "NAD83")
#extract data from the raster for each observation
#selecting the layers to pull from for each avalanche
#create a list with the layers to extract for each avalanche
create_date_list = function(d){
date_d = as.Date(d)
date_list1 = date_d + seq(-29, 0)
date_list = format(date_list1, "%Y%m%d")
return(date_list)
}
layers_to_extract = lapply(avalanches$date, create_date_list)
avalanches_tmean = terra::extract(tmean,
ava_vect,
layer = layers_to_extract,
ID = TRUE)
View(avalanches)
View(layers_to_extract)
formatted_date_range = format(date_range, "%Y%m%d")
terra::names(weather_data) = formatted_date_range
terra::set.names(weather_data) = formatted_date_range
names(weather_data) = formatted_date_range
layers_to_extract = lapply(avalanches$date, create_date_list)
avalanches_tmean = terra::extract(tmean,
ava_vect,
layer = layers_to_extract,
ID = TRUE)
View(weather_data)
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
View(avalanches_tmean)
avalanches_tmean[1]
avalanches_tmean[2]
View(layers_to_extract)
bind_rows(avalanches_tmean)
lookat = bind_rows(avalanches_tmean)
View(lookat)
View(avalanches_tmean)
avalanches = avalanches_pre |>
separate_wider_regex(cols = Location,
patterns = pattern,
too_few = "align_start") |>
separate_wider_regex(cols = Date,
patterns = date_pattern,
too_few = "align_start") |>
mutate(date = paste("20", tyear, "/", tmonth, "/", tday, sep = "")) |>
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude),
date = as.Date(date),
simple_date = format(date, "%Y%m%d"),
date_minus30 = date - 30,
simple_date_minus30 = format(date_minus30, "%Y%m%d"))|>
filter(date < end_date) |>
filter(date > start_date + 30) |>
mutate(ID = row_number())
View(avalanches_tmean)
plot(tmean[1])
View(avalanches_tmean)
View(avalanches)
install.packages("sf")
library(tidyverse)
library(sf)
library(tmap)
install.packages("tmap")
install.packages("units")
setwd("/Users/jonas/Documents/GitHub/course-materials/lecture-slides/12-Spatial")
counties = st_read("data/california_counties/CaliforniaCounties.shp")
library(tidyverse)
library(sf)
library(tmap)
library(units)
path = "/Users/jonas/Documents/GitHub/course-materials/lecture-slides/12-Spatial"
counties = st_read("data/california_counties/CaliforniaCounties.shp")
setwd("/Users/jonas/Documents/GitHub/course-materials/lecture-slides/12-Spatial")
getwd()
setwd("/Users/jonas/Documents/GitHub/course-materials/lecture-slides/12-Spatial")
setwd(path)
getwd()
install.packages("elevatr")
library(elevatr)
library(terra)
library(tidyverse)
library(purrr)
library(elevatr)
elevation = get_elev_point(ava_vect)
#Teton National Park avalanche data
avalanches_pre = read.csv("raw_data/MasterAVYdata.csv")
setwd("/Users/jonas/Library/CloudStorage/OneDrive-MontanaStateUniversity/ECNS 460/ECNS460PROJECT/data")
#Bring in weather rasters
tmean = rast("raw_data/teton_weather_rasters/teton_tmean_raster.tif")
tmax = rast("raw_data/teton_weather_rasters/teton_tmax_raster.tif")
tmin = rast("raw_data/teton_weather_rasters/teton_tmin_raster.tif")
ppt = rast("raw_data/teton_weather_rasters/teton_ppt_raster.tif")
tdmean = rast("raw_data/teton_weather_rasters/teton_tdmean_raster.tif")
vpdmin = rast("raw_data/teton_weather_rasters/teton_vpdmin_raster.tif")
vpdmax = rast("raw_data/teton_weather_rasters/teton_vpdmax_raster.tif")
#Creates a dataset of all of them together
weather_data = sds(tmean, tmax, tmin, ppt, tdmean, vpdmin, vpdmax)
#Teton National Park avalanche data
avalanches_pre = read.csv("raw_data/MasterAVYdata.csv")
#needed a little bit more cleaning to be compatible----
pattern = c("Lat: ", latitude = ".*?", "Lng: ", longitude = ".*?")
date_pattern = c(tmonth = ".*?", "/", tday = ".*?", "/", tyear = ".*?")
avalanches = avalanches_pre |>
separate_wider_regex(cols = Location,
patterns = pattern,
too_few = "align_start") |>
separate_wider_regex(cols = Date,
patterns = date_pattern,
too_few = "align_start") |>
mutate(date = paste("20", tyear, "/", tmonth, "/", tday, sep = "")) |>
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude),
date = as.Date(date),
simple_date = format(date, "%Y%m%d"),
date_minus30 = date - 30,
simple_date_minus30 = format(date_minus30, "%Y%m%d"))|>
filter(date < end_date) |>
filter(date > start_date + 30) |>
mutate(ID = row_number())
#Creates a dataset of all of them together
weather_data = sds(tmean, tmax, tmin, ppt, tdmean, vpdmin, vpdmax)
#add time to raster
start_date = as.Date("2020-01-01")
end_date = as.Date("2023-12-31")
date_range = seq(as.Date(start_date), as.Date(end_date), by = "day")
terra::time(weather_data) = date_range
formatted_date_range = format(date_range, "%Y%m%d")
names(weather_data) = formatted_date_range
#Teton National Park avalanche data
avalanches_pre = read.csv("raw_data/MasterAVYdata.csv")
#needed a little bit more cleaning to be compatible----
pattern = c("Lat: ", latitude = ".*?", "Lng: ", longitude = ".*?")
date_pattern = c(tmonth = ".*?", "/", tday = ".*?", "/", tyear = ".*?")
avalanches = avalanches_pre |>
separate_wider_regex(cols = Location,
patterns = pattern,
too_few = "align_start") |>
separate_wider_regex(cols = Date,
patterns = date_pattern,
too_few = "align_start") |>
mutate(date = paste("20", tyear, "/", tmonth, "/", tday, sep = "")) |>
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude),
date = as.Date(date),
simple_date = format(date, "%Y%m%d"),
date_minus30 = date - 30,
simple_date_minus30 = format(date_minus30, "%Y%m%d"))|>
filter(date < end_date) |>
filter(date > start_date + 30) |>
mutate(ID = row_number())
#Make points from avalanches----
#making a vector of points where avalanche observations take place
ava_vect = vect(avalanches, geom = c("longitude", "latitude"), crs = "NAD83")
#Changes the names of a tibble to the names I want
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
setNames(df, var_names)
}
#extract data from appropriate raster for each avalanche
make_weather_df = function(raster, avalanches_vector, var_name){
fun_extract = terra::extractRange(raster,
avalanches_vector,
first = avalanches_vector$simple_date_minus30,
last = avalanches_vector$simple_date,
ID = TRUE)
# turn the weather data from each individual into a tibble
fun_extract = lapply(fun_extract, tibble)
#Change the names of the tibbles and Add Id row back in
fun_extract = lapply(fun_extract, function(x) name_weather_vars(x, var_name))
fun_extract = bind_rows(fun_extract) |>
mutate(ID = row_number())
}
#Extract elevation for each point
elevation = get_elev_point(ava_vect)
?get_elev_point
View(avalanches)
#Extract elevation for each point
elevation = avalanches |>
select(latitude, longitude)|>
get_elev_point()
#Extract elevation for each point
elevation = avalanches |>
select(latitude, longitude)|>
get_elev_point(prj = "NAD83", src = "epqs")
library(sf)
elevation = avalanches |>
select(latitude, longitude)|>
get_elev_point(prj = "NAD83", src = "epqs")
elevation = get_elev_point(locations = as_sf(ava_vect), prj = "NAD83", src = "epqs")
library(terra)
library(tidyverse)
library(purrr)
library(elevatr)
library(sf)
as_sf(ava_vect)
ava_sf = as_sf(ava_vect)
terra::ava_sf = as_sf(ava_vect)
elevation = get_elev_point(locations = st_as_sf(ava_vect), prj = "NAD83", src = "epqs")
View(elevation)
elevation = get_elev_point(locations = st_as_sf(ava_vect), prj = "NAD83", src = "epqs") |>
select(elevation)
elevation = get_elev_point(locations = st_as_sf(ava_vect), prj = "NAD83", src = "epqs") |>
select(id, elevation)
elevation = get_elev_point(locations = st_as_sf(ava_vect), prj = "NAD83", src = "epqs")|>
select(ID, elevation)
View(elevation)
big_avalanche = left_join(big_avalanche, elevation)
avalanches_tmean = make_weather_df(tmean, ava_vect, "tmean")
big_avalanche = left_join(avalanches, avalanches_tmean)
avalanches_tmax = make_weather_df(tmax, ava_vect, "tmax")
big_avalanche = left_join(big_avalanche, avalanches_tmax)
avalanches_tmin = make_weather_df(tmin, ava_vect, "tmin")
big_avalanche = left_join(big_avalanche, avalanches_tmin)
avalanches_ppt = make_weather_df(ppt, ava_vect, "ppt")
big_avalanche = left_join(big_avalanche, avalanches_ppt)
avalanches_tdmean = make_weather_df(tdmean, ava_vect, "tdmean")
big_avalanche = left_join(big_avalanche, avalanches_tdmean)
avalanches_vpdmin = make_weather_df(vpdmin, ava_vect, "vpdmin")
big_avalanche = left_join(big_avalanche, avalanches_vpdmin)
avalanches_vpdmax = make_weather_df(vpdmax, ava_vect, "vpdmax")
big_avalanche = left_join(big_avalanche, avalanches_vpdmax)
big_avalanche = left_join(big_avalanche, elevation)
View(big_avalanche)
write_csv(big_avalanche, file = "clean_data/avalanche_weather")
library(tmap)
tm_shape(big_avalanche) + tm_dots()
tm_shape(st_as_sf(ava_vect)) + tm_dots()
teton = st_read("raw_data/grte_tracts/grte_boundary.shp")
tm_shape(st_as_sf(ava_vect)) + tm_dots()
tm_shape(teton) + tm_polygon() +tm_shape(st_as_sf(ava_vect)) + tm_dots()
tm_shape(teton) + tm_polygons() +tm_shape(st_as_sf(ava_vect)) + tm_dots()
View(ava_vect)
tm_shape(teton) + tm_polygons() +tm_shape(st_as_sf(ava_vect)) + tm_dots() + tm_raster("elevation")
tm_shape(teton) + tm_polygons() + tm_raster("elevation") +tm_shape(st_as_sf(ava_vect)) + tm_dots()
tm_shape(teton) + tm_raster("elevation") +tm_shape(st_as_sf(ava_vect)) + tm_dots()
tm_shape(teton) + tm_polygons() +
tm_shape(elevation) + tm_raster("elevation")
tm_shape(teton) + tm_polygons() +
tm_shape(tmean[1]) + tm_raster("elevation")
View(tmean)
tm_shape(teton) + tm_polygons() +
tm_shape(tmean[[1]]) + tm_raster("elevation")
tm_shape(teton) + tm_polygons() +
tm_shape(tmean[[1]]) + tm_raster()
tm_shape(st_as_sf(ava_vect)) + tm_dots()
tm_shape(teton) + tm_polygons() +
tm_shape(tmean[[1]]) + tm_raster() +
tm_shape(st_as_sf(ava_vect)) + tm_dots()
tm_shape(teton) + tm_polygons() +
tm_shape(tmean[[1]]) + tm_raster() +
tm_shape(st_as_sf(ava_vect)) + tm_dots(col = elevation)
tm_shape(teton) + tm_polygons() +
tm_shape(tmean[[1]]) + tm_raster() +
tm_shape(st_as_sf(ava_vect)) + tm_dots(col = "elevation")
tm_shape(teton) + tm_polygons() +
tm_shape(tmean[[1]]) + tm_raster() +
tm_shape(st_as_sf(ava_vect)) + tm_dots(cols = "elevation")
library(tidyverse)
big_avalanche |> ggplot(aes(tmean_lead0) +
geom_histogram()
big_avalanche |> ggplot(aes(tmean_lead0)) +
big_avalanche |>
ggplot(aes(tmean_lead0)) +
geom_histogram()
big_avalanche |>
ggplot(aes(x = tmean_lead1 ,y=tmean_lead0)) +
geom_scatter()
big_avalanche |>
ggplot(aes(x = tmean_lead1 ,y=tmean_lead0)) +
geom_point()
big_avalanche |>
ggplot(aes(x = tmean_lead2 ,y=tmean_lead0)) +
geom_point()
big_avalanche |>
ggplot(aes(x = tmean_lead3 ,y=tmean_lead0)) +
geom_point()
big_avalanche |>
ggplot(aes(x = tmean_lead4 ,y=tmean_lead0)) +
geom_point()
big_avalanche |>
ggplot(aes(x = tmean_lead10 ,y=tmean_lead0)) +
geom_point()
big_avalanche |>
ggplot(aes(x = tmean_lead14 ,y=tmean_lead0)) +
geom_point()
