#Everything can be an object
my_string = "I love coffeE"
#my_string is the object and lower() is a method
my_string.lower()
#classes get capitalized names
class Date:
"""Date class for representing and manipulating dates"""
def __init__(self, month, day, year):
"""A constructor method that sets the month, day and year"""
self.month = month
self.day = day
self.year = year
def get_month(self):
"""A reader method that returns the month"""
return self.month
def get_day(self):
"""A reader method that returns the day"""
return self.day
def get_year(self):
"""A reader method that returns the year"""
return self.year
def set_day(self, day):
"""A writer methods that sets the day"""
self.day = day
# -------------------------------
# Create an instance of Date
today = Date("October", 18, 2024)
print("Date:", today.get_month(), today.get_day(), today.get_year())
# Update the instance to be one day later
day = today.get_day()
today.set_day(day + 1)
print("Date:", today.get_month(), today.get_day(), today.get_year())
display.brewer.all(type = "seq")
library(RColorBrewer)
display.brewer.all(type = "seq")
library(RColorBrewer)
#sequential
display.brewer.all(type = "seq")
#diverging
display.brewer.all(type = "div")
library(RColorBrewer)
#sequential
display.brewer.all(type = "seq")
#diverging
display.brewer.all(type = "div")
#qualitative
display.brewer.all(type = "qual")
library(viridisLite)
install.packages("raster")
raster("/Users/jonas/Downloads/PRISM_ppt_stable_4kmD2_20230101_20231231_bil/PRISM_ppt_stable_4kmD2_20230101_bil.bil",pattern = ".bil")
library(raster)
raster("/Users/jonas/Downloads/PRISM_ppt_stable_4kmD2_20230101_20231231_bil/PRISM_ppt_stable_4kmD2_20230101_bil.bil",pattern = ".bil")
file1 = raster("/Users/jonas/Downloads/PRISM_ppt_stable_4kmD2_20230101_20231231_bil/PRISM_ppt_stable_4kmD2_20230101_bil.bil",pattern = ".bil")
View(file1)
plot(file1)
library(terra)
rast("/Users/jonas/Library/CloudStorage/OneDrive-MontanaStateUniversity/ECNS 460/ECNS460PROJECT/data/raw_data/teton_weather_rasters/teton_tmax_raster.tif")
library(terra)
rast("/Users/jonas/Library/CloudStorage/OneDrive-MontanaStateUniversity/ECNS 460/ECNS460PROJECT/data/raw_data/teton_weather_rasters/teton_tmax_raster.tif")
test = rast("/Users/jonas/Library/CloudStorage/OneDrive-MontanaStateUniversity/ECNS 460/ECNS460PROJECT/data/raw_data/teton_weather_rasters/teton_tmax_raster.tif")
plot(test)
plot(test[1])
View(test)
plot(test[::200])
plot(test[,,200])
plot(test[,:200])
plot(test, index = 1)
plot(test, 2)
plot(test, 3)
plot(test, 4)
plot(test, 10)
plot(test, 25)
plot(test, 40)
plot(test, 23)
plot(test, 60)
plot(test, 80)
plot(test, 90)
plot(test, 120)
plot(test, 150)
plot(test, 170)
plot(test, 180)
setwd("/Users/jonas/Library/CloudStorage/OneDrive-MontanaStateUniversity/ECNS 460/ECNS460PROJECT/data")
library(terra)
library(tidyverse)
#Bring in weather rasters
tmean = rast("raw_data/teton_weather_rasters/teton_tmean_raster.tif")
tmax = rast("raw_data/teton_weather_rasters/teton_tmax_raster.tif")
tmin = rast("raw_data/teton_weather_rasters/teton_tmin_raster.tif")
ppt = rast("raw_data/teton_weather_rasters/teton_ppt_raster.tif")
tdmean = rast("raw_data/teton_weather_rasters/teton_tdmean_raster.tif")
vpdmin = rast("raw_data/teton_weather_rasters/teton_vpdmin_raster.tif")
vpdmax = rast("raw_data/teton_weather_rasters/teton_vpdmax_raster.tif")
#Creates a dataset of all of them together
weather_data = sds(tmean, tmax, tmin, ppt, tdmean, vpdmin, vpdmax)
#add time to raster
start_date = as.Date("2020-01-01")
end_date = as.Date("2023-12-31")
date_range = seq(as.Date(start_date), as.Date(end_date), by = "day")
terra::time(weather_data) = date_range
#Teton National Park avalanche data
avalanches_pre = read.csv("raw_data/MasterAVYdata.csv")
#needed a little bit more cleaning to be compatible----
pattern = c("Lat: ", latitude = ".*?", "Lng: ", longitude = ".*?")
date_pattern = c(tmonth = ".*?", "/", tday = ".*?", "/", tyear = ".*?")
avalanches = avalanches_pre |>
separate_wider_regex(cols = Location,
patterns = pattern,
too_few = "align_start") |>
separate_wider_regex(cols = Date,
patterns = date_pattern,
too_few = "align_start") |>
mutate(date = paste("20", tyear, "/", tmonth, "/", tday, sep = "")) |>
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude),
date = as.Date(date),
simple_date = format(date, "%Y%m%d"),
date_minus30 = date - 30,
simple_date_minus30 = format(date_minus30, "%Y%m%d"))|>
filter(date < end_date)
#Make points from avalanches----
#making a vector of points where avalanche observations take place
ava_vect = vect(avalanches, geom = c("longitude", "latitude"), crs = "NAD83")
avalanches_tmean =terra::extractRange(x,ava_vect,first = as.character(ava_vect$simple_date_minus30), last = as.character(ava_vect$simple_date))
avalanches_tmean = terra::extractRange(tmean,ava_vect,first = as.character(ava_vect$simple_date_minus30), last = as.character(ava_vect$simple_date))
View(avalanches_tmean)
avalanches_tmean = rbind(avalanches_tmean)
View(avalanches_tmean)
avalanches_tmean = append(avalanches_tmean)
avalanches_tmean = terra::extractRange(tmean,ava_vect,first = as.character(ava_vect$simple_date_minus30), last = as.character(ava_vect$simple_date))
avalanches_tmean = append(avalanches_tmean)
avalanches_tmean[[1]] |> view()
avalanches_tmean = terra::extractRange(tmean,ava_vect,first = as.character(ava_vect$simple_date_minus30), last = as.character(ava_vect$simple_date), ID = TRUE
avalanches_tmean = terra::extractRange(tmean,ava_vect,first = as.character(ava_vect$simple_date_minus30), last = as.character(ava_vect$simple_date), ID = TRUE)
avalanches_tmean = terra::extractRange(tmean,ava_vect,first = as.character(ava_vect$simple_date_minus30), last = as.character(ava_vect$simple_date), ID = TRUE)
View(avalanches_tmean)
avalanches_tmean[[1]] |> view()
avalanches_tmean = rbind(avalanches_tmean)
avalanches_tmean = terra::extractRange(tmean,ava_vect,first = as.character(ava_vect$simple_date_minus30), last = as.character(ava_vect$simple_date))
View(avalanches_tmean)
avalanches_tmean_df = bind_rows(avalanches_tmean)
View(avalanches_tmean_df)
avalanches_tmean[[1]] |> view()
avalanches_tmean_df = bind_rows(avalanches_tmean)
View(avalanches_tmean_df)
