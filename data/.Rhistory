name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
var_names = tibble(var_names)
colnames(df) = var_names
}
avalanches_tmean = sapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
avalanches_tmean = bind_rows(avalanches_tmean)
avalanches_tmean[1]
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
#Use colnames()!!!!!
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
colnames(df) = var_names
}
avalanches_tmean = sapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
avalanches_tmean = bind_rows(avalanches_tmean)
rlang::last_trace()
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
colnames(df) = var_names
}
avalanches_tmean = sapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
colnames(avalanches_tmean$1) = butthole
colnames(avalanches_tmean[1]) = butthole
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
colnames(df) = var_names
}
avalanches_tmean = sapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
#Use colnames()!!!!!
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
colnames(df) = var_names
}
avalanches_tmean = sapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
View(avalanches_tmean)
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
#Use colnames()!!!!!
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
set_names(df) = var_names
}
avalanches_tmean = sapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
library(purrr)
layers_to_extract = lapply(avalanches$date, create_date_list)
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
#Use colnames()!!!!!
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
set_names(df) = var_names
}
avalanches_tmean = sapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
#Use colnames()!!!!!
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
set_names(df, var_names)
}
avalanches_tmean = sapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
View(avalanches_tmean)
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
#Use colnames()!!!!!
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
setNames(df, var_names)
}
avalanches_tmean = sapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
View(avalanches_tmean)
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
View(avalanches_tmean)
avalanches_tmean = terra::extractRange(tmean,
ava_vect,
first = avalanches$simple_date_minus30,
last = avalanches$simple_date,
ID = TRUE)
avalanches_tmean = lapply(avalanches_tmean, tibble)
avalanches_tmean[1]
setNames(avalanches_tmean[1], butthole)
setNames(avalanches_tmean[[1]], butthole)
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
setNames(df, var_names)
}
avalanches_tmean = lapply(avalanches_tmean, function(x) name_weather_vars(x, "tmean"))
View(avalanches_tmean)
bind_rows(avalanches_tmean)
avalanches_tmean = bind_rows(avalanches_tmean)
avalanches_tmean = bind_rows(avalanches_tmean) |>
mutate(id = row_number())
View(avalanches_tmean)
ava_vect$simple_date_minus30
make_weather_df = function(rasters, avalanches_vector){
extract = lapply(rasters, function(x) terra::extractRange(x,
avalanches_vector,
first = avalanches_vector$simple_date_minus30,
last = avalanches_vector$simple_date,
ID = TRUE)
}
make_weather_df = function(rasters, avalanches_vector){
extract = lapply(rasters, function(x) terra::extractRange(x,
avalanches_vector,
first = avalanches_vector$simple_date_minus30,
last = avalanches_vector$simple_date,
ID = TRUE)
}
make_weather_df = function(rasters, avalanches_vector){
extract = lapply(rasters, function(x) terra::extractRange(x,
avalanches_vector,
first = avalanches_vector$simple_date_minus30,
last = avalanches_vector$simple_date,
ID = TRUE))
}
make_weather_df(weather_data)
make_weather_df(weather_data, ava_vect)
tester = make_weather_df(weather_data, ava_vect)
View(tester)
names(tmean)
dimnames(tmean)
names(tmean)
name(tmean)
tmean[0]
make_weather_df = function(raster, avalanches_vector, var_name){
fun_extract = terra::extractRange(raster,
avalanches_vector,
first = avalanches_vector$simple_date_minus30,
last = avalanches_vector$simple_date,
ID = TRUE))
make_weather_df = function(raster, avalanches_vector, var_name){
fun_extract = terra::extractRange(raster,
avalanches_vector,
first = avalanches_vector$simple_date_minus30,
last = avalanches_vector$simple_date,
ID = TRUE)
# turn the weather data from each individual into a tibble
fun_extract = lapply(fun_extract, tibble)
fun_extract = lapply(fun_extract, function(x) name_weather_vars(x, var_name))
fun_extract = bind_rows(fun_extract) |>
mutate(id = row_number())
}
make_weather_df(tmean, ava_vect, "tmean")
tester = make_weather_df(tmean, ava_vect, "tmean")
avalanches_tmean = make_weather_df(tmean, ava_vect, "tmean")
avalanches_tmean = make_weather_df(tmean, ava_vect, "tmean")
avalanches_tmax = make_weather_df(tmax, ava_vect, "tmax")
avalanches_tmin = make_weather_df(tmin, ava_vect, "tmin")
avalanches_ppt = make_weather_df(ppt, ava_vect, "ppt")
avalanches_tdmean = make_weather_df(tdmean, ava_vect, "tdmean")
avalanches_vpdmin = make_weather_df(vpdmin, ava_vect, "vpdmin")
avalanches_vpdmax = make_weather_df(vpdmax, ava_vect, "vpdmax")
View(avalanches_tmean)
View(avalanches_tmax)
library(tidyverse)
library(sf)
library(tmap)
path = "/Users/jonas/Library/CloudStorage/OneDrive-MontanaStateUniversity/ECNS 460"
setwd(path)
counties = st_read("random data/california_counties/CaliforniaCounties.shp")|>
st_make_valid()
#quickplots
plot(counties["MED_AGE"])
qtm(counties)
tmap_mode("view")
qtm(counties)
#This is not a dataframe so things behave slightly weirdly
counties$geometry[1]
#plots 5th column
plot(counties[5])
#plots 5th row, 5th column. It's not all that cool
plot(counties[5,5])
#plots 5th row of geometry
plot(counties$geometry[5])
# Pro-tip: if you want the program to move a little faster, drop the geometry column
#getting just alameda
alameda = counties|>
filter(NAME == "Alameda")
qtm(alameda)
#Example tmap
map_alameda = tm_shape(counties) +
tm_polygons(alpha = 0.5) +
tm_shape(alameda) +
tm_borders(col = "green", lwd = 3)
#save The map
#create a static image
tmap_save(map_alameda, "map_alameda.png")
#interactive map
tmap_save(map_alameda, "map_alameda.html")
# shapefile
st_write(alameda, "alameda.shp", delete_dsn = T)
#Challenge - California map colored by median age
tm_shape(counties) +
tm_polygons(col = "MED_AGE", palette = "Greens")
#Reference Systems----
states = st_read("random data/us_states_contiguous/states_contiguous.shp")
#These are not the same, so we can't plot them together rn
st_crs(states)
st_crs(counties)
st_transform(states, "NAD83")
#kind of funky plotting the entire country in the California CRS. Things look kinda bendy
qtm(states)
tm_shape(states) +
tm_polygons(alpha = 0.1, col = "red") +
tm_shape(counties) +
tm_polygons(col = "MED_AGE", palette = "Greens")
st_transform(states, counties)
stopifnot(st_crs(states)==st_crs(counties))
st_transform(states, st_crs(counties))
stopifnot(st_crs(states)==st_crs(counties))
st_transform(states, st_crs(counties))
states_geog = st_transform(states, st_crs(counties))
stopifnot(st_crs(states_geog)==st_crs(counties))
#kind of funky plotting the entire country in the California CRS. Things look kinda bendy
tm_shape(states_geog) +
tm_polygons(alpha = 0.1, col = "red") +
tm_shape(counties) +
tm_polygons(col = "MED_AGE", palette = "Greens")
View(states)
teton = "/Users/jonas/Library/CloudStorage/OneDrive-MontanaStateUniversity/ECNS 460/ECNS460PROJECT/data/raw_data/grte_tracts/grte_boundary.shp"
qtm(teton)
teton = st_read("/Users/jonas/Library/CloudStorage/OneDrive-MontanaStateUniversity/ECNS 460/ECNS460PROJECT/data/raw_data/grte_tracts/grte_boundary.shp")
qtm(teton)
st_area(teton)
counties_area = st_area(counties)
counties_area = st_area(counties) * 2590000
counties_area
counties2 = counties |> cbind(counties_area)
View(counties)
View(counties2)
counties2$area_web = counties|>
st_transform(3857)|>
st_area()
View(counties2)
stations = st_read("random data/bart_stations_2019.geojson")
View(stations)
oak = stations |> filter(station_na == "Oakland Airport")
st_distance(stations, oak)
county_centers = st_centroid(counties)
tm_shape(counties) +
tm_shape(county_centers)
tm_shape(counties) +
tm_polygons() +
tm_shape(county_centers) +
tm_dots()
protected = st_read("random data/protected_areas/CPAD_2020a_Units.shp")
stopifnot(st_crs(protected)==st_crs(counties))
protected_ala = st_filter(protected, alameda)
View(protected_ala)
protected_ala = st_filter(protected, alameda)
tm_shape(alameda) + tm_polygons()+
tm_shape(protected_ala) + tm_polygons(col = ACCESS_TYP, pallete = "Blues")
protected_ala = st_filter(protected, alameda)
tm_shape(alameda) + tm_polygons()+
tm_shape(protected_ala) + tm_polygons(col = "ACCESS_TYP", pallete = "Blues")
tm_shape(alameda) + tm_polygons()+
tm_shape(protected_ala) + tm_polygons(col = "ACCESS_TYP", pallete = "-Blues")
tm_shape(alameda) + tm_polygons()+
tm_shape(protected_ala) + tm_polygons(col = "ACCESS_TYP")
bart_ala = stations |>
st_filter(alameda)
bart_ala = stations |>
st_filter(alameda)
bart_ala = stations |>
st_crs(st_crs(alameda))|>
st_filter(alameda)
bart_ala = stations |>
st_crs(st_crs(alameda))
bart_ala = stations |>
st_crs(st_crs(alameda))|>
st_filter(alameda)
bart_ala = stations |>
st_transform(st_crs(alameda)) |>
filter(alameda)
tm_shape(alameda) + tm_polygons()+
tm_shape(bart_ala) + tm_dots
tm_shape(alameda) + tm_polygons()+
tm_shape(bart_ala) + tm_dots()
bart_ala = stations |>
st_transform(st_crs(alameda)) |>
st_filter(alameda)
tm_shape(alameda) + tm_polygons()+
tm_shape(bart_ala) + tm_dots()
View(bart_ala)
library(terra)
library(tidyverse)
library(purrr)
#Bring in weather rasters
tmean = rast("raw_data/teton_weather_rasters/teton_tmean_raster.tif")
setwd("/Users/jonas/Library/CloudStorage/OneDrive-MontanaStateUniversity/ECNS 460/ECNS460PROJECT/data")
library(terra)
library(tidyverse)
library(purrr)
#Bring in weather rasters
tmean = rast("raw_data/teton_weather_rasters/teton_tmean_raster.tif")
tmax = rast("raw_data/teton_weather_rasters/teton_tmax_raster.tif")
tmin = rast("raw_data/teton_weather_rasters/teton_tmin_raster.tif")
ppt = rast("raw_data/teton_weather_rasters/teton_ppt_raster.tif")
tdmean = rast("raw_data/teton_weather_rasters/teton_tdmean_raster.tif")
vpdmin = rast("raw_data/teton_weather_rasters/teton_vpdmin_raster.tif")
vpdmax = rast("raw_data/teton_weather_rasters/teton_vpdmax_raster.tif")
#Creates a dataset of all of them together
weather_data = sds(tmean, tmax, tmin, ppt, tdmean, vpdmin, vpdmax)
#add time to raster
start_date = as.Date("2020-01-01")
end_date = as.Date("2023-12-31")
date_range = seq(as.Date(start_date), as.Date(end_date), by = "day")
terra::time(weather_data) = date_range
formatted_date_range = format(date_range, "%Y%m%d")
names(weather_data) = formatted_date_range
#Teton National Park avalanche data
avalanches_pre = read.csv("raw_data/MasterAVYdata.csv")
#needed a little bit more cleaning to be compatible----
pattern = c("Lat: ", latitude = ".*?", "Lng: ", longitude = ".*?")
date_pattern = c(tmonth = ".*?", "/", tday = ".*?", "/", tyear = ".*?")
avalanches = avalanches_pre |>
separate_wider_regex(cols = Location,
patterns = pattern,
too_few = "align_start") |>
separate_wider_regex(cols = Date,
patterns = date_pattern,
too_few = "align_start") |>
mutate(date = paste("20", tyear, "/", tmonth, "/", tday, sep = "")) |>
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude),
date = as.Date(date),
simple_date = format(date, "%Y%m%d"),
date_minus30 = date - 30,
simple_date_minus30 = format(date_minus30, "%Y%m%d"))|>
filter(date < end_date) |>
filter(date > start_date + 30) |>
mutate(ID = row_number())
#Make points from avalanches----
#making a vector of points where avalanche observations take place
ava_vect = vect(avalanches, geom = c("longitude", "latitude"), crs = "NAD83")
#Changes the names of a tibble to the names I want
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
setNames(df, var_names)
}
#extract data from appropriate raster for each avalanche
make_weather_df = function(raster, avalanches_vector, var_name){
fun_extract = terra::extractRange(raster,
avalanches_vector,
first = avalanches_vector$simple_date_minus30,
last = avalanches_vector$simple_date,
ID = TRUE)
# turn the weather data from each individual into a tibble
fun_extract = lapply(fun_extract, tibble)
#Change the names of the tibbles and Add Id row back in
fun_extract = lapply(fun_extract, function(x) name_weather_vars(x, var_name))
fun_extract = bind_rows(fun_extract) |>
mutate(id = row_number())
}
#These are each a table of lead weather variables for each avalanches observation
avalanches_tmean = make_weather_df(tmean, ava_vect, "tmean")
avalanches_tmax = make_weather_df(tmax, ava_vect, "tmax")
avalanches_tmin = make_weather_df(tmin, ava_vect, "tmin")
avalanches_ppt = make_weather_df(ppt, ava_vect, "ppt")
avalanches_tdmean = make_weather_df(tdmean, ava_vect, "tdmean")
avalanches_vpdmin = make_weather_df(vpdmin, ava_vect, "vpdmin")
avalanches_vpdmax = make_weather_df(vpdmax, ava_vect, "vpdmax")
View(avalanches_pre)
View(avalanches_tdmean)
big_avalanche = left_join(avalanches,avalanches_tmean)
View(avalanches)
fun_extract = lapply(fun_extract, function(x) name_weather_vars(x, var_name))
library(terra)
library(tidyverse)
library(purrr)
#Bring in weather rasters
tmean = rast("raw_data/teton_weather_rasters/teton_tmean_raster.tif")
tmax = rast("raw_data/teton_weather_rasters/teton_tmax_raster.tif")
tmin = rast("raw_data/teton_weather_rasters/teton_tmin_raster.tif")
ppt = rast("raw_data/teton_weather_rasters/teton_ppt_raster.tif")
tdmean = rast("raw_data/teton_weather_rasters/teton_tdmean_raster.tif")
vpdmin = rast("raw_data/teton_weather_rasters/teton_vpdmin_raster.tif")
vpdmax = rast("raw_data/teton_weather_rasters/teton_vpdmax_raster.tif")
#Creates a dataset of all of them together
weather_data = sds(tmean, tmax, tmin, ppt, tdmean, vpdmin, vpdmax)
#add time to raster
start_date = as.Date("2020-01-01")
end_date = as.Date("2023-12-31")
date_range = seq(as.Date(start_date), as.Date(end_date), by = "day")
terra::time(weather_data) = date_range
formatted_date_range = format(date_range, "%Y%m%d")
names(weather_data) = formatted_date_range
#Teton National Park avalanche data
avalanches_pre = read.csv("raw_data/MasterAVYdata.csv")
#needed a little bit more cleaning to be compatible----
pattern = c("Lat: ", latitude = ".*?", "Lng: ", longitude = ".*?")
date_pattern = c(tmonth = ".*?", "/", tday = ".*?", "/", tyear = ".*?")
avalanches = avalanches_pre |>
separate_wider_regex(cols = Location,
patterns = pattern,
too_few = "align_start") |>
separate_wider_regex(cols = Date,
patterns = date_pattern,
too_few = "align_start") |>
mutate(date = paste("20", tyear, "/", tmonth, "/", tday, sep = "")) |>
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude),
date = as.Date(date),
simple_date = format(date, "%Y%m%d"),
date_minus30 = date - 30,
simple_date_minus30 = format(date_minus30, "%Y%m%d"))|>
filter(date < end_date) |>
filter(date > start_date + 30) |>
mutate(ID = row_number())
#Make points from avalanches----
#making a vector of points where avalanche observations take place
ava_vect = vect(avalanches, geom = c("longitude", "latitude"), crs = "NAD83")
#Changes the names of a tibble to the names I want
name_weather_vars = function(df, variable){
var_names = sapply(seq(30, 0, -1), function(x) paste(variable, "_lead", as.character(x), sep= ""))
setNames(df, var_names)
}
#extract data from appropriate raster for each avalanche
make_weather_df = function(raster, avalanches_vector, var_name){
fun_extract = terra::extractRange(raster,
avalanches_vector,
first = avalanches_vector$simple_date_minus30,
last = avalanches_vector$simple_date,
ID = TRUE)
# turn the weather data from each individual into a tibble
fun_extract = lapply(fun_extract, tibble)
#Change the names of the tibbles and Add Id row back in
fun_extract = lapply(fun_extract, function(x) name_weather_vars(x, var_name))
fun_extract = bind_rows(fun_extract) |>
mutate(ID = row_number())
}
#These are each a table of lead weather variables for each avalanches observation
avalanches_tmean = make_weather_df(tmean, ava_vect, "tmean")
avalanches_tmax = make_weather_df(tmax, ava_vect, "tmax")
avalanches_tmin = make_weather_df(tmin, ava_vect, "tmin")
avalanches_ppt = make_weather_df(ppt, ava_vect, "ppt")
avalanches_tdmean = make_weather_df(tdmean, ava_vect, "tdmean")
avalanches_vpdmin = make_weather_df(vpdmin, ava_vect, "vpdmin")
avalanches_vpdmax = make_weather_df(vpdmax, ava_vect, "vpdmax")
big_avalanche = left_join(avalanches, avalanches_tmean)
avalanches_tmean = make_weather_df(tmean, ava_vect, "tmean")
big_avalanche = left_join(avalanches, avalanches_tmean)
avalanches_tmax = make_weather_df(tmax, ava_vect, "tmax")
big_avalanche = left_join(big_avalanches, avalanches_tmax)
avalanches_tmean = make_weather_df(tmean, ava_vect, "tmean")
big_avalanche = left_join(avalanche, avalanches_tmean)
avalanches_tmean = make_weather_df(tmean, ava_vect, "tmean")
big_avalanche = left_join(avalanches, avalanches_tmean)
avalanches_tmax = make_weather_df(tmax, ava_vect, "tmax")
big_avalanche = left_join(big_avalanche, avalanches_tmax)
avalanches_tmin = make_weather_df(tmin, ava_vect, "tmin")
big_avalanche = left_join(big_avalanche, avalanches_tmin)
avalanches_ppt = make_weather_df(ppt, ava_vect, "ppt")
big_avalanche = left_join(big_avalanche, avalanches_ppt)
avalanches_tdmean = make_weather_df(tdmean, ava_vect, "tdmean")
big_avalanche = left_join(big_avalanche, avalanches_tdmean)
avalanches_vpdmin = make_weather_df(vpdmin, ava_vect, "vpdmin")
big_avalanche = left_join(big_avalanche, avalanches_vpdmin)
avalanches_vpdmax = make_weather_df(vpdmax, ava_vect, "vpdmax")
big_avalanche = left_join(big_avalanche, avalanches_vpdmax)
View(big_avalanche)
write_csv(big_avalanche, file = "clean_data/avalanche_weather")
protected_intersection = st_intersection(protected, alameda)
protected_intersection = st_intersection(protected, alameda)
tm_shape(alameda) + tm_polygons()+
tm_shape(protected_intersection) + tm_polygons(col = "ACCESS_TYP")
table(protected_intersection$COUNTY)
